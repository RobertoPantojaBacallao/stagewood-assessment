{"version":3,"sources":["App.js","Event.js","reportWebVitals.js","index.js"],"names":["client","ApolloClient","uri","App","props","state","eventList","Search","Sort","handleChange","bind","returnEventList","this","setState","filter","sort","query","gql","loading","error","data","ret","title","map","e","i","toLowerCase","includes","Row","id","date","startDate","Col","sm","md","lg","xl","className","to","pathname","source","a","b","localeCompare","target","value","list","document","body","style","backgroundColor","type","onChange","for","Container","Component","Card","textAlign","CardTitle","location","CardBody","class","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","path","exact","component","Event","getElementById"],"mappings":"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","file":"static/js/main.33fa634c.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {React, Component} from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Link } from 'react-router-dom';\nimport {Container, Row, Col} from 'reactstrap';\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventList: '',\n      Search: '',\n      Sort: 0,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.returnEventList = this.returnEventList.bind(this);\n  }\n\n  componentDidMount(){\n    this.setState({ eventList: this.returnEventList('') })\n  }\n\n  // Returns a list of events that matches the filter and automatically sorts\n  returnEventList(filter = this.state.Search, sort = this.state.Sort){\n    return <Query\n                query={gql`\n                  {\n                      id \n                      title\n                      startDate\n                      source\n                  }\n                `}\n              >\n            {({loading, error, data}) => {\n                if(loading) return <p>Loading...</p>\n                if(error) return <p>Error</p>\n                // sets ret to a list of events\n                let ret = data.title.map(function(e,i){\n                        if(e.toLowerCase().includes(filter.toLowerCase())){\n                          return <Row title={e} id={data.id[i]} date={data.startDate[i]}> \n                          <Col sm='1' md='2' lg='4' xl='4'>&nbsp;</Col>\n                          <Col sm='10' md='8' lg='4' xl='4'>\n                            <Link className='link' to={{pathname:'/Event', state:{title: data.title[i], date: data.startDate[i], source: data.source[i]}}}>\n                            <div className='event' >{e}</div>\n                            </Link>\n                            </Col>\n                            <Col sm='1' md='2' lg='4' xl='4'>&nbsp;</Col>\n                            </Row>\n                        }\n                      });\n\n                // Sort ret depending on value of sort\n                ret.sort(function(a,b) {\n                    if(sort == 0){\n                      return a.props.title.localeCompare(b.props.title)\n                    } else if (sort == 1) {\n                      return b.props.title.localeCompare(a.props.title)\n                    } else if (sort == 2) {\n                      return a.props.date.localeCompare(b.props.date)\n                    } else {\n                      return b.props.date.localeCompare(a.props.date)\n                    }\n                    \n                })\n\n                return ret;\n\n              }\n            }\n\n          </Query>\n  }\n\n  // Updates state on change of Search or Sort\n  handleChange(e){\n    if(e.target.id == 'search')\n      this.setState({Search: e.target.value}, () => {\n        let list = this.returnEventList()\n        this.setState({eventList: list})})\n    else if(e.target.id == 'sort')\n      this.setState({Sort: e.target.value}, () => {\n        let list = this.returnEventList()\n        this.setState({eventList: list})})\n\n  }\n\n  render(){\n\n    document.body.style.backgroundColor = \"#e0e0e0\";\n\n    return(<ApolloProvider className='container' client={client}>\n      <div className=\"container\">\n        <form>\n          <input id='search' type=\"text\" onChange={this.handleChange}/>\n          <label id='sort-label' for='sort'>Sort By</label>\n          <select id='sort' onChange={this.handleChange}>\n            <option value='0'>A - Z</option>\n            <option value='1'>Z - A</option>\n            <option value='2'>Date Asc</option>\n            <option value='3'>Date Desc</option>\n          </select>\n        </form>\n        <br/>\n        <Container>\n            {this.state.eventList}\n        </Container>\n      </div>\n    </ApolloProvider>)\n  }\n  \n};\n\nexport default App;\n","import './App.css';\r\nimport {React, Component} from 'react';\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport './Event.css'\r\nimport { Card, CardTitle, CardBody, Container, Row, Col } from 'reactstrap';\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:5000/graphql\"\r\n});\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n\r\n    document.body.style.backgroundColor = \"#e0e0e0\";\r\n    const image = \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Image_created_with_a_mobile_phone.png/1200px-Image_created_with_a_mobile_phone.png\" //this.props.location.state.source\r\n\r\n    return(\r\n    <ApolloProvider client={client} className='container'>\r\n      <Container>\r\n        <Row>\r\n          <Col sm='1' md='2' lg='3' xl='4'></Col>\r\n          <Col sm='10' md='8' lg='6' xl='4'>\r\n            <Card className=\"card-display\" style={{textAlign: 'center'}}>\r\n              <CardTitle>{this.props.location.state.title}</CardTitle>\r\n              <CardBody id='inline'>\r\n                <div id=\"inline\">\r\n                  <div>\r\n                    <img class='img' src={image}/>\r\n                  </div>\r\n                  <br/>\r\n                  <div>\r\n                    {this.props.location.state.date}\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col  sm='1' md='2' lg='3' xl='4'></Col>\r\n        </Row>\r\n      </Container>\r\n    </ApolloProvider>)\r\n  }\r\n  \r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Event from './Event';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router,Route,\n  Redirect,Switch} from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <Switch>\n           <Route path=\"/\" exact component = {App} />\n           <Route path=\"/event\" exact component={Event} />\n        </Switch>\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}